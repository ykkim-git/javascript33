/**
 * 설계패턴

 - 설계패턴의 종류
  Module
  Prototype
  Observer
  Singleton

 - 설계패턴의 주요 사항
  1. Context: 어떤 상황에서 패턴이 사용되었는가?
  2. Problem: 무엇을 해결하려는가?
  3. Solution: 이 패턴을 사용하면 제안된 문제를 어떻게 해결할 수 있는가?
  4. Implementation: 코드 구현은 어떻게 생겼는가?
 */

 
/**
 * 1. Module 패턴
다른 구성요소와 독립적으로 유지하는데 가장 널리 사용되는 패턴이다.
클래스와 같은데 캡슐화를 하여 다른클래스에서 엑세스하지 못하도록 보호한다.
public및 private 접근 권한 설정을 가능하게 한다.
 */ 

// 모듈은 변수와 메서드를 보호하는 클로저처럼 Private범위를 허용하는 IIFE이어야 한다.
// 기본 패턴
(function() {
  // private 변수들과 함수들을 선언

  return {
    // public 변수들과 함수들을 선언
  }
})();



/**
 * 2. Prototype 패턴
 주로 성능이 중요한 상황에서 객체를 생성하는데 사용함.
 */


 /**
  * 3. Observer 패턴
  객체가 수정되면 종속 객체에 변경사항을 브로드캐스팅 한다.
  종속성을 줄이기 위해 뷰를 모델에서 분리하는 것.
  Observer 패턴에서 독립적인 객체와 subject 를 구분하는 것이 중요합니다.
  */

  /**
   * 4. Singleton 패턴
   단일 인스턴스 생성만 허용하지만 동일한 객체의 여러 인스턴스를 허용한다.
   클라이언트가 여러 객체를 생성하지 못하도록 제한하고, 
   첫 번째 객체가 생성된 이후 첫 번째 객체를 리턴한다.
   */